// Incluir as bibliotecas
// Gerencia as requisições, rotas e URLs, entre outra funcionalidades
const express = require("express");
// Chamar a função express
const router = express.Router();
// Incluir o arquivo que possui a conexão com banco de dados
const db = require('./../db/models');

// Criar a rota listar 
// Endereço para acessar através da aplicação externa: http://localhost:8080/pedidos?page=3
router.get("/pedidos", async (req, res) => {

    // Receber o número da página, quando não é enviado o número da página é atribuido página 1
    const { page = 1 } = req.query;
    //console.log(page);

    // Limite de registros em cada página
    const limit = 20;

    // Variável com o número da última página
    var lastPage = 1;

    // Contar a quantidade de registro no banco de dados
    const countPedido = await db.PEDIDOS.count();
    //console.log(countPedido);

    // Acessa o IF quando encontrar registro no banco de dados
    if (countPedido !== 0) {
        // Calcular a última página
        lastPage = Math.ceil(countPedido / limit);
        //console.log(lastPage);
    } else {
        // Pausar o processamento e retornar a mensagem de erro
        return res.status(400).json({
            mensagem: "Erro: Nenhum pedido encontrado!"
        });
    }

    //console.log((page * limit) - limit); // 3 * 10 - 10 = 20
    // Recuperar todos os pedido do banco de dados
    const pedidos = await db.PEDIDOS.findAll({

        // Indicar quais colunas recuperar
        attributes: ['id', 'clientes_id', 'data','total', 'status','pagamento','entrega','taxa_entrega'],

        // Ordenar os registros pela coluna id na forma decrescente
        order: [['id', 'ASC']],

        // Calcular a partir de qual registro deve retornar e o limite de registros
        offset: Number((page * limit) - limit),
        limit: limit
    });

    // Acessa o IF se encontrar o registro no banco de dados
    if (pedidos) {
        // Criar objeto com as informações para paginação
        var pagination = {
            // Caminho
            path: '/pedidos',
            // Página atual
            page,
            // URL da página anterior
            prev_page_url: page - 1 >= 1 ? page - 1 : false,
            // URL da próxima página
            next_page_url: Number(page) + Number(1) > lastPage ? false : Number(page) + Number(1),
            // Última página
            lastPage,
            // Quantidade de registros
            total: countPedido
        }

        // Pausar o processamento e retornar os dados em formato de objeto
        return res.json({
            pedidos,
            pagination
        });
    } else {
        // Pausar o processamento e retornar a mensagem de erro
        return res.status(400).json({
            mensagem: "Erro: Nenhum pedido encontrado!"
        });
    }
});

// Criar a rota visualizar e receber o parâmentro id enviado na URL 
// Endereço para acessar através da aplicação externa: http://localhost:8080/pedidos/7
router.get("/pedidos/:id", async (req, res) => {
    // Receber o parâmetro enviado na URL
    const { id } = req.params;

    try {
        // Recuperar todos os registros do banco de dados que correspondem ao clientes_id
        const pedidos = await db.PEDIDOS.findAll({
            // Indicar quais colunas recuperar
            attributes: ['id', 'clientes_id', 'data', 'total', 'status', 'pagamento', 'entrega', 'taxa_entrega'],

            // Condição para indicar quais registros devem ser retornados do banco de dados
            where: { clientes_id: id },
            // Não há necessidade de definir limit ou offset aqui
        });

        // Verifica se há pedidos encontrados
        if (pedidos.length > 0) {
            // Retorna os dados dos pedidos encontrados
            return res.json({
                pedidos: pedidos
            });
        } else {
            // Retorna uma mensagem se nenhum pedido foi encontrado
            return res.status(404).json({
                mensagem: "Nenhum pedido encontrado para este cliente."
            });
        }
    } catch (error) {
        // Captura erros de consulta ao banco de dados
        console.error("Erro ao consultar pedidos:", error);
        return res.status(500).json({
            mensagem: "Erro ao buscar pedidos."
        });
    }
});

router.get("/pedidos/:id/:status", async (req, res) => {
    // Receber parâmetros enviados na URL
    const { id, status } = req.params;

    try {
        // Recuperar todos os registros do banco de dados que correspondem aos critérios
        const pedidos = await db.PEDIDOS.findAll({
            // Indicar quais colunas recuperar
            attributes: ['id', 'clientes_id', 'data', 'total', 'status', 'pagamento', 'entrega', 'taxa_entrega'],

            // Condição para indicar quais registros devem ser retornados do banco de dados
            where: {
                clientes_id: id,
                status: status // Adiciona o critério de status
            },
        });

        // Verifica se há pedidos encontrados
        if (pedidos.length > 0) {
            // Retorna os dados dos pedidos encontrados
            return res.json({
                pedidos: pedidos
            });
        } else {
            // Retorna uma mensagem se nenhum pedido foi encontrado
            return res.status(404).json({
                mensagem: `Nenhum pedido encontrado para o cliente ${id} com o status ${status}.`
            });
        }
    } catch (error) {
        // Captura erros de consulta ao banco de dados
        console.error("Erro ao consultar pedidos:", error);
        return res.status(500).json({
            mensagem: "Erro ao buscar pedidos."
        });
    }
});


router.post("/pedidos", async (req, res) => {

    // Receber os dados enviados no corpo da requisição
    var dados = req.body;
    //console.log(dados);

    // Salvar no banco de dados
    await db.PEDIDOS.create(dados).then((dados) => {
        // Pausar o processamento e retornar os dados em formato de objeto
        return res.json({
            mensagem: "Pedido cadastrado com sucesso!",
            dados
        });
    }).catch((erro) => {
        // Pausar o processamento e retornar a mensagem de erro
        return res.json({
            erro:erro.message,
            mensagem: "Erro: Pedido não cadastrado!"
        });
    });
});


router.put("/pedidos", async (req, res) => {

    // Receber os dados enviados no corpo da requisição
    var dados = req.body;
    // Editar no banco de dados
    await db.PEDIDOS.update(dados, { where: { id: dados.id } })
        .then(() => {
            // Pausar o processamento e retornar a mensagem
            return res.json({
                mensagem: "Pedido editado com sucesso!"
            });
        }).catch(() => {
            // Pausar o processamento e retornar a mensagem
            return res.status(400).json({
                mensagem: "Erro: Pedido não editado com sucesso!"
            });
        });
});

// Criar a rota apagar e receber o parâmentro id enviado na URL 
// Endereço para acessar através da aplicação externa: http://localhost:8080/pedidos/3
router.delete("/pedidos/:id", async (req, res) => {

    // Receber o parâmetro enviado na URL
    const { id } = req.params;
    console.log(req.params)
    // Apagar pedido no banco de dados utilizando a MODELS pedidos
    await db.PEDIDOS.destroy({
        // Acrescentar o WHERE na instrução SQL indicando qual registro excluir no BD
        where: {id} 
    }).then(() => {
        // Pausar o processamento e retornar a mensagem
        return res.json({
            mensagem: "Pedido apagado com sucesso!"
        });
    }).catch(() => {
        // Pausar o processamento e retornar a mensagem
        return res.status(400).json({
            mensagem: "Erro: Pedido não apagado com sucesso!"
        });
    });
});

// Exportar a instrução que está dentro da constante router 
module.exports = router;