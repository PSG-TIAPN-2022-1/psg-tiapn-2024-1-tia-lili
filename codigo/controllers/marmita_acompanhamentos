// Incluir as bibliotecas
// Gerencia as requisições, rotas e URLs, entre outra funcionalidades
const express = require("express");
// Chamar a função express
const router = express.Router();
// Incluir o arquivo que possui a conexão com banco de dados
const db = require('./../db/models');

// Criar a rota listar 
// Endereço para acessar através da aplicação externa: http://localhost:8080/marmita_acompanhamentos?page=3
router.get("/marmita_acompanhamentos", async (req, res) => {

    // Receber o número da página, quando não é enviado o número da página é atribuido página 1
    const { page = 1 } = req.query;
    //console.log(page);

    // Limite de registros em cada página
    const limit = 20;

    // Variável com o número da última página
    var lastPage = 1;

    // Contar a quantidade de registro no banco de dados
    const countMarmita_acompanhamento = await db.MARMITA_ACOMPANHAMENTOS.count();
    //console.log(countMarmita_acompanhamento);

    // Acessa o IF quando encontrar registro no banco de dados
    if (countMarmita_acompanhamento !== 0) {
        // Calcular a última página
        lastPage = Math.ceil(countMarmita_acompanhamento / limit);
        //console.log(lastPage);
    } else {
        // Pausar o processamento e retornar a mensagem de erro
        return res.status(400).json({
            mensagem: "Erro: Nenhum marmita_acompanhamento encontrado!"
        });
    }

    //console.log((page * limit) - limit); // 3 * 10 - 10 = 20
    // Recuperar todos os marmita_acompanhamento do banco de dados
    const marmita_acompanhamentos = await db.MARMITA_ACOMPANHAMENTOS.findAll({

        // Indicar quais colunas recuperar
        attributes: [`marmita_id1` ,`acompanhamentos_id`],

        // Ordenar os registros pela coluna id na forma decrescente
        order: [['marmita_id1', 'ASC']],

        // Calcular a partir de qual registro deve retornar e o limite de registros
        offset: Number((page * limit) - limit),
        limit: limit
    });

    // Acessa o IF se encontrar o registro no banco de dados
    if (marmita_acompanhamentos) {
        // Criar objeto com as informações para paginação
        var pagination = {
            // Caminho
            path: '/marmita_acompanhamentos',
            // Página atual
            page,
            // URL da página anterior
            prev_page_url: page - 1 >= 1 ? page - 1 : false,
            // URL da próxima página
            next_page_url: Number(page) + Number(1) > lastPage ? false : Number(page) + Number(1),
            // Última página
            lastPage,
            // Quantidade de registros
            total: countMarmita_acompanhamento
        }

        // Pausar o processamento e retornar os dados em formato de objeto
        return res.json({
            marmita_acompanhamentos,
            pagination
        });
    } else {
        // Pausar o processamento e retornar a mensagem de erro
        return res.status(400).json({
            mensagem: "Erro: Nenhum marmita_acompanhamento encontrado!"
        });
    }
});

// Criar a rota visualizar e receber o parâmentro id enviado na URL 
// Endereço para acessar através da aplicação externa: http://localhost:8080/marmita_acompanhamentos/7
router.get("/marmita_acompanhamentos/:marmita_id1", async (req, res) => {

    // Receber o parâmetro enviado na URL
    const { marmita_id1 } = req.params;
    //console.log(id);

    // Recuperar o registro do banco de dados
    const marmita_acompanhamento = await db.MARMITA_ACOMPANHAMENTOS.findAll({
        // Indicar quais colunas recuperar
        attributes: [`marmita_id1` ,`acompanhamentos_id`],

        // Acrescentado condição para indicar qual registro deve ser retornado do banco de dados
        where: { marmita_id1 },
    });
    //console.log(marmita_acompanhamento);

    // Acessa o IF se encontrar o registro no banco de dados
    if (marmita_acompanhamento) {
        // Pausar o processamento e retornar os dados
        return res.json({
            marmita_acompanhamento,
        });
    } else {
        // Pausar o processamento e retornar a mensagem de erro
        return res.status(400).json({
            mensagem: "Erro: Marmita_acompanhamento não encontrado!"
        });
    }
});


router.post("/marmita_acompanhamentos", async (req, res) => {

    // Receber os dados enviados no corpo da requisição
    var dados = req.body;
    //console.log(dados);

    // Salvar no banco de dados
    await db.MARMITA_ACOMPANHAMENTOS.create(dados).then((dados) => {
        // Pausar o processamento e retornar os dados em formato de objeto
        return res.json({
            mensagem: "Marmita_acompanhamento cadastrado com sucesso!",
            dados
        });
    }).catch(() => {
        // Pausar o processamento e retornar a mensagem de erro
        return res.json({
            mensagem: "Erro: Marmita_acompanhamento não cadastrado com sucesso!"
        });
    });
});


router.put("/marmita_acompanhamentos", async (req, res) => {

    // Receber os dados enviados no corpo da requisição
    var dados = req.body;
    // Editar no banco de dados
    await db.MARMITA_ACOMPANHAMENTOS.update(dados, { where: { id: dados.id } })
        .then(() => {
            // Pausar o processamento e retornar a mensagem
            return res.json({
                mensagem: "Marmita_acompanhamento editado com sucesso!"
            });
        }).catch(() => {
            // Pausar o processamento e retornar a mensagem
            return res.status(400).json({
                mensagem: "Erro: Marmita_acompanhamento não editado com sucesso!"
            });
        });
});

// Criar a rota apagar e receber o parâmentro id enviado na URL 
// Endereço para acessar através da aplicação externa: http://localhost:8080/marmita_acompanhamentos/3
router.delete("/marmita_acompanhamentos/:marmita_id1/:acompanhamentos_id", async (req, res) => {

    
    // Receber o parâmetro enviado na URL
    const { marmita_id1, acompanhamentos_id } = req.params;
    const parsedMarmitaId = parseInt(marmita_id1);
    const parsedAcompanhamentosId = parseInt(acompanhamentos_id);
    console.log(req.params)
    // Apagar marmita_acompanhamento no banco de dados utilizando a MODELS marmita_acompanhamentos
    await db.MARMITA_ACOMPANHAMENTOS.destroy({
        // Acrescentar o WHERE na instrução SQL indicando qual registro excluir no BD
        where: {
            marmita_id1: parsedMarmitaId,
            acompanhamentos_id: parsedAcompanhamentosId
          }
    }).then(() => {
        // Pausar o processamento e retornar a mensagem
        return res.json({
            mensagem: "Marmita_acompanhamento apagado com sucesso!"
        });
    }).catch((erro) => {
        // Pausar o processamento e retornar a mensagem
        return res.status(400).json({
            erro:erro.message,
            mensagem: "Erro: Marmita_acompanhamento não apagado com sucesso!"
        });
    });
});

// Exportar a instrução que está dentro da constante router 
module.exports = router;